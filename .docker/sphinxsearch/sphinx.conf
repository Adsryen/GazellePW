# Sphinx 2.2.9
# WARNING: key 'enable_star' was permanently removed from Sphinx configuration. Refer to documentation for details.
# WARNING: key 'enable_star' was permanently removed from Sphinx configuration. Refer to documentation for details.
# WARNING: key 'max_matches' was permanently removed from Sphinx configuration. Refer to documentation for details.
# ERROR: unknown key name 'compat_sphinxql_magics' in /etc/sphinxsearch/sphinx.conf line 481 col 24.
# FATAL: failed to parse config file '/etc/sphinxsearch/sphinx.conf'
# the above error was fixed by commenting compat_sphinxql_magics
source connect {
    type = mysql
    sql_host = mysql
    sql_user = gazelle
    sql_pass = password
    sql_db = gazelle
    sql_port = 3306
}

source torrents_base : connect {
    sql_attr_uint = groupid
    sql_attr_uint = time
    sql_attr_uint = categoryid
    sql_attr_uint = releasetype
    sql_attr_bigint = size
    sql_attr_uint = snatched
    sql_attr_uint = seeders
    sql_attr_uint = leechers
    sql_attr_uint = year
    sql_attr_bool = scene
    sql_attr_uint = freetorrent
    sql_attr_float = imdbrating
    sql_attr_float = doubanrating
    sql_attr_float = rtrating
    sql_attr_uint = diy
    sql_attr_uint = buy
    sql_attr_uint = chinesedubbed
    sql_attr_uint = specialsub
    sql_attr_uint = checked
}
source torrents : torrents_base {
    #By inheriting from torrents_base, we keep all the connection info
    sql_query_pre = SET group_concat_max_len = 101400
    sql_query_pre = SET @starttime = NOW()
    sql_query_pre = SET NAMES UTF8
    sql_query_pre = REPLACE INTO sphinx_index_last_pos VALUES ('torrents', UNIX_TIMESTAMP(@starttime))
    sql_query_pre = TRUNCATE sphinx_tg
    sql_query_pre = INSERT INTO sphinx_tg \
        (id, name, year, catid, reltype, \
            tags, imdbid, imdbrating, doubanrating, region, language, rtrating) \
        SELECT tg.ID, CONCAT_WS(' ', tg.Name, tg.SubName), tg.Year, \
            tg.Categoryid, tg.Releasetype,\
            replace(group_concat(t.Name SEPARATOR ' '), '.', '_'), \
            tg.IMDBID, tg.IMDBRating, tg.DoubanRating, \
            REPLACE(tg.Region, ',', ' '), \
            REPLACE(tg.Language, ',', ' '), \
            replace(tg.RTRating,"%","")/100 \
        FROM torrents_group tg \
        INNER JOIN torrents_tags tt ON (tt.GroupID = tg.ID) \
        INNER JOIN tags t ON (t.ID = tt.TagID) \
        WHERE tg.time < @starttime \
        GROUP BY tg.ID
    sql_query_pre = TRUNCATE sphinx_t
    sql_query_pre = INSERT INTO sphinx_t \
        (id, gid, size, snatched, seeders, leechers, time, scene, \
            freetorrent, description,  \
            filelist, uid, source, codec, container, resolution, subtitles, processing, remtitle, \
            diy, buy, chinesedubbed, specialsub, checked) \
        SELECT t.ID, t.GroupID, t.Size, t.Snatched, t.Seeders, t.Leechers, UNIX_TIMESTAMP(t.Time), \
            CAST(t.Scene AS CHAR), CAST(t.FreeTorrent AS CHAR), t.Description, \
            (case when (t.Container = 'm2ts') then REPLACE(REPLACE(t.FilePath, '_', ' '), '/', ' ') else REPLACE(REPLACE(t.FileList, '_', ' '), '/', ' ') end) AS FileList, \
            t.UserID, t.Source, t.Codec, t.Container, t.Resolution, \
            t.Subtitles, \
            t.Processing, \
            REPLACE(t.RemasterTitle, '/', ' '), \
            t.Diy, t.Buy, t.ChineseDubbed, t.SpecialSub, t.Checked \
        FROM torrents t \
        WHERE t.Time < @starttime
    sql_query_pre = TRUNCATE sphinx_a
    sql_query_pre = INSERT INTO sphinx_a \
        (gid, aname) \
        SELECT GroupID, GROUP_CONCAT(aa.Name SEPARATOR ' ') \
        FROM torrents_artists AS ta \
            JOIN artists_alias AS aa ON (ta.ArtistID = aa.ArtistID) \
        GROUP BY ta.groupid \
        ORDER BY NULL
    sql_query = SELECT t.id, g.id AS groupid, g.name AS groupname, \
            tags AS taglist, year, year AS yearfulltext, \
            catid AS categoryid, t.time, reltype AS releasetype, \
            size, snatched, seeders, leechers, \
            scene, freetorrent, description, remtitle, \
            source, codec, container, resolution, processing,\
            language, region, imdbid, imdbrating, doubanrating, rtrating, REPLACE(subtitles, ',', ' ') as subtitles,\
            diy, buy, chinesedubbed, specialsub, filelist, checked \
        FROM sphinx_t AS t \
            JOIN sphinx_tg AS g ON t.gid = g.id
    sql_joined_field = artistname from query; \
        SELECT t.id, aname FROM sphinx_a JOIN sphinx_t AS t USING(gid) ORDER BY t.id ASC;
    sql_query_post_index = DELETE FROM sphinx_delta WHERE Time <= \
        (SELECT id FROM sphinx_index_last_pos WHERE type = 'torrents')
}
index torrents {
    source = torrents
    path = /var/lib/sphinxsearch/data/torrents
    docinfo = extern ##### 文档信息存储方式
    preopen = 1
    morphology = none
    phrase_boundary = U+F7 # This needs to the the same as the file delimiter in classes/torrents.class.php
    phrase_boundary_step = 50
    charset_type = utf-8
    min_word_len = 1
    min_prefix_len = 0 
    min_infix_len = 1
    ngram_len = 1
    charset_table = U+FF10..U+FF19->0..9, 0..9, U+FF41..U+FF5A->a..z, U+FF21..U+FF3A->a..z,\
A..Z->a..z, a..z, U+0149, U+017F, U+0138, U+00DF, U+00FF, U+00C0..U+00D6->U+00E0..U+00F6,\
U+00E0..U+00F6, U+00D8..U+00DE->U+00F8..U+00FE, U+00F8..U+00FE, U+0100->U+0101, U+0101,\
U+0102->U+0103, U+0103, U+0104->U+0105, U+0105, U+0106->U+0107, U+0107, U+0108->U+0109,\
U+0109, U+010A->U+010B, U+010B, U+010C->U+010D, U+010D, U+010E->U+010F, U+010F,\
U+0110->U+0111, U+0111, U+0112->U+0113, U+0113, U+0114->U+0115, U+0115, \
U+0116->U+0117,U+0117, U+0118->U+0119, U+0119, U+011A->U+011B, U+011B, U+011C->U+011D,\
U+011D,U+011E->U+011F, U+011F, U+0130->U+0131, U+0131, U+0132->U+0133, U+0133, \
U+0134->U+0135,U+0135, U+0136->U+0137, U+0137, U+0139->U+013A, U+013A, U+013B->U+013C, \
U+013C,U+013D->U+013E, U+013E, U+013F->U+0140, U+0140, U+0141->U+0142, U+0142, \
U+0143->U+0144,U+0144, U+0145->U+0146, U+0146, U+0147->U+0148, U+0148, U+014A->U+014B, \
U+014B,U+014C->U+014D, U+014D, U+014E->U+014F, U+014F, U+0150->U+0151, U+0151, \
U+0152->U+0153,U+0153, U+0154->U+0155, U+0155, U+0156->U+0157, U+0157, U+0158->U+0159,\
U+0159,U+015A->U+015B, U+015B, U+015C->U+015D, U+015D, U+015E->U+015F, U+015F, \
U+0160->U+0161,U+0161, U+0162->U+0163, U+0163, U+0164->U+0165, U+0165, U+0166->U+0167, \
U+0167,U+0168->U+0169, U+0169, U+016A->U+016B, U+016B, U+016C->U+016D, U+016D, \
U+016E->U+016F,U+016F, U+0170->U+0171, U+0171, U+0172->U+0173, U+0173, U+0174->U+0175,\
U+0175,U+0176->U+0177, U+0177, U+0178->U+00FF, U+00FF, U+0179->U+017A, U+017A, \
U+017B->U+017C,U+017C, U+017D->U+017E, U+017E, U+0410..U+042F->U+0430..U+044F, \
U+0430..U+044F,U+05D0..U+05EA, U+0531..U+0556->U+0561..U+0586, U+0561..U+0587, \
U+0621..U+063A, U+01B9,U+01BF, U+0640..U+064A, U+0660..U+0669, U+066E, U+066F, \
U+0671..U+06D3, U+06F0..U+06FF,U+0904..U+0939, U+0958..U+095F, U+0960..U+0963, \
U+0966..U+096F, U+097B..U+097F,U+0985..U+09B9, U+09CE, U+09DC..U+09E3, U+09E6..U+09EF, \
U+0A05..U+0A39, U+0A59..U+0A5E,U+0A66..U+0A6F, U+0A85..U+0AB9, U+0AE0..U+0AE3, \
U+0AE6..U+0AEF, U+0B05..U+0B39,U+0B5C..U+0B61, U+0B66..U+0B6F, U+0B71, U+0B85..U+0BB9, \
U+0BE6..U+0BF2, U+0C05..U+0C39,U+0C66..U+0C6F, U+0C85..U+0CB9, U+0CDE..U+0CE3, \
U+0CE6..U+0CEF, U+0D05..U+0D39, U+0D60,U+0D61, U+0D66..U+0D6F, U+0D85..U+0DC6, \
U+1900..U+1938, U+1946..U+194F, U+A800..U+A805,U+A807..U+A822, U+0386->U+03B1, \
U+03AC->U+03B1, U+0388->U+03B5, U+03AD->U+03B5,U+0389->U+03B7, U+03AE->U+03B7, \
U+038A->U+03B9, U+0390->U+03B9, U+03AA->U+03B9,U+03AF->U+03B9, U+03CA->U+03B9, \
U+038C->U+03BF, U+03CC->U+03BF, U+038E->U+03C5,U+03AB->U+03C5, U+03B0->U+03C5, \
U+03CB->U+03C5, U+03CD->U+03C5, U+038F->U+03C9,U+03CE->U+03C9, U+03C2->U+03C3, \
U+0391..U+03A1->U+03B1..U+03C1,U+03A3..U+03A9->U+03C3..U+03C9, U+03B1..U+03C1, \
U+03C3..U+03C9, U+0E01..U+0E2E,U+0E30..U+0E3A, U+0E40..U+0E45, U+0E47, U+0E50..U+0E59, \
U+A000..U+A48F, U+4E00..U+9FBF,U+3400..U+4DBF, U+20000..U+2A6DF, U+F900..U+FAFF, \
U+2F800..U+2FA1F, U+2E80..U+2EFF,U+2F00..U+2FDF, U+3100..U+312F, U+31A0..U+31BF, \
U+3040..U+309F, U+30A0..U+30FF,U+31F0..U+31FF, U+AC00..U+D7AF, U+1100..U+11FF, \
U+3130..U+318F, U+A000..U+A48F,U+A490..U+A4CF
    blend_chars = !, ", U+23, $, %, &, ', (, ), *, +, U+2C, -, ., /, :, U+3B, <, =, >, ?, @, U+5B, U+5C, U+5D, ^, U+60, U+7C, U+7E, U+A1..U+BF
    blend_mode = trim_none, trim_head, trim_tail, trim_both
    ngram_chars = U+4E00..U+9FBF, U+3400..U+4DBF, U+20000..U+2A6DF, U+F900..U+FAFF,\
U+2F800..U+2FA1F, U+2E80..U+2EFF, U+2F00..U+2FDF, U+3100..U+312F, U+31A0..U+31BF,\
U+3040..U+309F, U+30A0..U+30FF, U+31F0..U+31FF, U+AC00..U+D7AF, U+1100..U+11FF,\
U+3130..U+318F, U+A000..U+A48F, U+A490..U+A4CF
}
source delta : torrents_base {
    sql_query = SELECT *, Year AS yearfulltext FROM sphinx_delta WHERE Size > 0;
    sql_query_killlist = SELECT ID FROM sphinx_delta
}
index delta : torrents {
    source = delta
    path = /var/lib/sphinxsearch/data/delta
}
source requests_base : connect {
    sql_attr_uint = UserID
    sql_attr_uint = TimeAdded
    sql_attr_uint = LastVote
    sql_attr_uint = CategoryID
    sql_attr_uint = Year
    sql_attr_uint = ReleaseType
    sql_attr_uint = FillerID
    sql_attr_uint = TorrentID
    sql_attr_uint = TimeFilled
    sql_attr_uint = Visible
    sql_attr_uint = Votes
    sql_attr_uint = Bounty
}
source requests : requests_base {
    sql_query_pre = TRUNCATE TABLE sphinx_requests
    sql_query_pre = SET group_concat_max_len = 10140
    sql_query_pre = SET @starttime = NOW()
    sql_query_pre = REPLACE INTO sphinx_index_last_pos VALUES ('requests', UNIX_TIMESTAMP(@starttime))
    sql_query_pre = INSERT INTO sphinx_requests ( \
                ID, UserID, TimeAdded, LastVote, CategoryID, Title, \
                Year, ReleaseType,  \
                CodecList, SourceList, ContainerList, ResolutionList, FillerID, \
                TorrentID, TimeFilled, Visible, Votes, Bounty ) \
            SELECT \
                r.ID, r.UserID, UNIX_TIMESTAMP(TimeAdded), \
                UNIX_TIMESTAMP(LastVote), CategoryID, Title, Year, \
                ReleaseType, \
                CodecList, SourceList, ContainerList, ResolutionList, FillerID, TorrentID, \
                UNIX_TIMESTAMP(TimeFilled), Visible, \
                COUNT(rv.RequestID), SUM(rv.Bounty) >> 10 \
            FROM requests AS r \
                JOIN requests_votes AS rv ON rv.RequestID = r.ID \
            GROUP BY rv.RequestID
    sql_query_pre = INSERT INTO sphinx_requests ( \
                ID, ArtistList ) \
            SELECT \
                RequestID, \
                GROUP_CONCAT(aa.Name SEPARATOR ' ') \
            FROM requests_artists AS ra \
                JOIN artists_alias AS aa ON aa.ArtistID = ra.ArtistID \
                JOIN requests AS r ON r.ID = ra.RequestID \
            WHERE TimeAdded <= @starttime \
            GROUP BY r.ID \
            ON DUPLICATE KEY UPDATE ArtistList = VALUES(ArtistList)
    sql_query = SELECT ID, UserID, TimeAdded, LastVote, CategoryID, Title, \
                Year, ArtistList, ReleaseType, CodecList, SourceList, ContainerList, ResolutionList, FillerID, \
                TorrentID, TimeFilled, Visible, Votes, Bounty, \
                Year AS YearFullText \
            FROM sphinx_requests
    sql_joined_field = taglist from query; \
        SELECT rt.RequestID, REPLACE(t.Name, '.', '_') \
        FROM requests_tags AS rt \
            JOIN tags AS t ON TagID = ID \
        ORDER BY requestid ASC;
    sql_attr_multi = uint Voter from query; \
        SELECT RequestID AS ID, UserID FROM requests_votes
    sql_attr_multi = uint Bookmarker from query; \
        SELECT RequestID AS ID, UserID FROM bookmarks_requests
    sql_query_post_index = DELETE FROM sphinx_requests_delta WHERE TimeAdded <= \
        (SELECT ID FROM sphinx_index_last_pos WHERE type = 'requests')
}
source requests_delta : requests_base {
    sql_query = SELECT ID, UserID, TimeAdded, LastVote, CategoryID, Title, TagList, \
                Year, ArtistList, ReleaseType, CodecList, SourceList, ContainerList, ResolutionList, FillerID, \
                TorrentID, TimeFilled, Visible, Votes, Bounty, \
                Year AS YearFullText \
            FROM sphinx_requests_delta
    sql_query_killlist = SELECT ID FROM sphinx_requests_delta
    sql_attr_multi = uint Voter from query; \
        SELECT v.RequestID, v.UserID FROM requests_votes AS v \
        JOIN sphinx_requests_delta AS d ON d.ID = v.RequestID
    sql_attr_multi = uint Bookmarker from query; \
        SELECT b.RequestID, b.UserID FROM bookmarks_requests AS b \
        JOIN sphinx_requests_delta AS d ON d.ID = b.RequestID
}
index requests : torrents {
    source = requests
    path = /var/lib/sphinxsearch/data/requests
    infix_fields = taglist
    min_infix_len = 3
}
index requests_delta : requests {
    source = requests_delta
    path = /var/lib/sphinxsearch/data/requests_delta
}
source log : connect {
    sql_attr_uint = Time
    sql_query = SELECT ID, UNIX_TIMESTAMP(Time) AS Time, Message FROM log
    sql_query_post_index = REPLACE INTO sphinx_index_last_pos VALUES ('log', $maxid)
}
source log_delta : log {
    sql_query_pre = SELECT ID FROM sphinx_index_last_pos WHERE type = 'log' INTO @lastid
    sql_query = SELECT ID, UNIX_TIMESTAMP(Time) AS Time, Message FROM log WHERE ID > @lastid
    sql_query_post_index = SET @nothing = 0
}
index log : torrents {
    source = log
    path = /var/lib/sphinxsearch/data/log
    min_word_len = 1
    min_infix_len = 0
    infix_fields =
}
index log_delta : log {
    source = log_delta
    path = /var/lib/sphinxsearch/data/log_delta
}

indexer {
    mem_limit = 128M
}

searchd {
    listen = 9312
    listen = 9306:mysql41
    log = /var/log/sphinxsearch/searchd.log
    query_log = /var/log/sphinxsearch/query.log
    pid_file = /var/run/sphinxsearch/searchd.pid
    mva_updates_pool = 1M
    #compat_sphinxql_magics = 0
}
